package org.example.Main;


import org.example.Repository.Common.DatabaseConnection;

import java.sql.Timestamp;
import java.util.Date;
import java.util.Objects;
import java.util.Scanner;

public class Controller {
/*
    public int menu(){
        /*Afegir una nova sala amb el seu respectiu nivell de dificultat.
        Incorporar pistes temàtiques per enriquir l'experiència de joc.
        Introduir objectes de decoració per ambientar les sales de manera única.
        Mostrar l'inventari actualitzat, mostrant les quantitats disponibles de cada element (sales, pistes i objectes de decoració).
        Visualitzar el valor total en euros de l'inventari de l'Escape Room virtual.
        Permetre la retirada de sales, pistes o objectes de decoració de l'inventari.
        Generar tiquets de venda per als diferents jugadors/es.
        Calcular i mostrar el total d'ingressos generats per vendes de tiquets de l'Escape Room virtual.
        Notificar als usuaris sobre esdeveniments importants a l'Escape Room, com l'addició de noves pistes, la finalització d'una sala, etc.
        Els usuaris interessats en aquests esdeveniments podran sol·licitar registrar-se per poder rebre notificacions quan es produeixin esdeveniments rellevants

        Scanner sc = new Scanner(System.in);
        System.out.println("\n\nChoose one of the following options: ");
        System.out.println("    1.-Create new Escape Room.");
        System.out.println("    2.-Add new room.");
        System.out.println("    3.-Add tip to room.");
        System.out.println("    4.-Add decoration object to room.");
        System.out.println("    5.-Display inventory.");
        System.out.println("    6.-Display value of the inventory.");
        System.out.println("    7.-Remove room.");
        System.out.println("    8.-Remove tip.");
        System.out.println("    9.-Remove decoration object.");
        System.out.println("    10.-Generate player's ticket.");
        System.out.println("    11.-Display income generated by ticket sales.");
        System.out.println("    12.-Subscribe to receive important notifications.");
        System.out.println("    0.-Exit");
        return sc.nextInt();
    }
    public void start() {
        int option, id;
        String name, theme, material, difficulty;
        double price;
        DatabaseConnection dbc = new DatabaseConnection();
        Scanner read = new Scanner(System.in);
        read.useDelimiter("\r?\n");
        do{
            option = menu();
            switch (option){
                case 1:
                    EscapeRoomBuilderTEST builder = new EscapeRoomBuilderTEST();
                    System.out.println("What is the Escape Room's name?");
                    name = read.next();
                    builder.setName(name);
                    System.out.println("What is the Escape Room's price?");
                    price = Double.parseDouble(read.next());
                    builder.setPrice(price);
                    System.out.println("What is the Escape Room's theme?");
                    theme = read.next();
                    builder.setTheme(theme);
                    builder.setDeleted(0);
                    //builder.setCreated_at(new Timestamp(new Date().getTime()));
                    //builder.setUpdated_at(new Timestamp(new Date().getTime()));
                    EscapeRoomTEST eroom = builder.build();
                    //dbc.addEscapeRoom(eroom);
                    break;
                case 2:
                    System.out.println("What is the Room's name?");
                    name = read.next();
                    System.out.println("What is the Room's price?");
                    price = Double.parseDouble(read.next());
                    System.out.println("What is the Room's difficulty?");
                    difficulty = read.next();
                    System.out.println("What is the Escape Room's id?");
                    id = Integer.parseInt(read.next());
                    //dbc.addRoom(new RoomTEST(name,difficulty,price,id, 0,new Timestamp(new Date().getTime()),new Timestamp(new Date().getTime())));
                    break;
                case 3:
                    System.out.println("What is the tip's text?");
                    name = read.next();
                    System.out.println("To which room does this tip belong?");
                    id = Integer.parseInt(read.next());
                    //dbc.addTips(new TipsTEST(name,id));
                    break;
                case 4:
                    System.out.println("What is the decoration object's name?");
                    name = read.next();
                    System.out.println("What is the object's material?");
                    material = read.next();
                    System.out.println("What is the object's price?");
                    price = Double.parseDouble(read.next());
                    System.out.println("What is the decoration object's id?");
                    id = Integer.parseInt(read.next());
                    System.out.println("What is the Room's difficulty?");
                    difficulty = read.next();
                    //dbc.addObjectDeco(new ObjectDecoTEST(name, material, id, price, 0, new Timestamp(new Date().getTime()), new Timestamp(new Date().getTime())));
                    break;
                /*case 5:
                    System.out.println("These are the rooms in the Escape Room's inventory:");
                    for(RoomTEST r:dbc.getAllRooms()){
                        System.out.println(r.getName());
                    }
                    System.out.println("These are the decoration objects in the Escape Room's inventory:");
                    for(ObjectDecoTEST o:dbc.getAllObjectDecos()){
                        System.out.println(o.getName());
                    }
                    System.out.println("These are the tips in the Escape Room's inventory:");
                    for(TipsTEST t:dbc.getAllTips()){
                        System.out.println(t.getText());
                    }
                    break;
                case 6:
                    double sum = 0;
                    for(ObjectDecoTEST o:dbc.getAllObjectDecos()){
                        sum += o.getPrice();
                    }
                    for(RoomTEST r:dbc.getAllRooms()){
                        sum += r.getPrice();
                    }
                    System.out.println("The inventory's value is: " + sum);
                    break;
                case 7:
                    System.out.println("What room do you want to delete?");
                    name = read.next();
                    for(RoomTEST r:dbc.getAllRooms()){
                        if(Objects.equals(name, r.getName())){

                        }
                    }
                    break;
            }


        }while(option!=0);


    }



 */
}


